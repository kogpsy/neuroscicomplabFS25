---
filters:
    - pyodide
---

# Schleifen programmieren mit Python

Schleifen sind ein wesentliches Konzept in der Programmierung, das es ermöglicht, Code mehrfach auszuführen, ohne ihn wiederholt schreiben zu müssen. In Python gibt es zwei Hauptarten von Schleifen:

-   `for`-Schleifen: Ideal für die Iteration über eine Sequenz.
-   `while`-Schleifen: Läuft so lange, bis eine bestimmte Bedingung erfüllt ist.

Um Python Codes zu testen/schreiben, gehen Sie auf: <https://www.online-python.com/>

## `for`-Schleifen

Die `for`-Schleife wird oft genutzt, um über eine Liste oder eine andere Sequenz zu iterieren.

```python
hirnregionen = ["Frontallappen", "Okzipitallappen", "Temporallappen"] 
for hirnregion in hirnregionen: 
    print("Ich mag den", hirnregion, "!")
```

In dieser Konsole können Sie Python-Code schreiben, verändern und ausführen:

```{pyodide-python}
hirnregionen = ["Frontallappen", "Okzipitallappen", "Temporallappen"]
for hirnregion in hirnregionen:   
    print("Ich mag den", hirnregion, "!")
```

Man kann eine `for`-Schleife auch mit `range()` verwenden:

``` python
for i in range(5):  # Iteriert von 0 bis 4
    print("Iteration Nummer:", i)
    
```

```{pyodide-python}
for i in range(5):  # Iteriert von 0 bis 4
    print("Iteration Nummer:", i)
```
## `while`-Schleifen

Eine `while`-Schleife wird benutzt, wenn die Anzahl der Iterationen nicht im Voraus bekannt ist, sondern von einer Bedingung abhängt.

``` python
zaehler = 0
while zaehler < 3:
    print("Dies ist Schleifeniteration:", zaehler)
    zaehler = zaehler + 1  # Erhöht den Zähler, um eine Endlosschleife zu vermeiden
```

```{pyodide-python}
zaehler = 0
while zaehler < 3:
    print("Dies ist Schleifeniteration:", zaehler)
    zaehler = zaehler + 1  # Erhöht den Zähler, um eine Endlosschleife zu vermeiden
```


<br>

::: callout-caution
## Hands-on 1-3: `for` und `while`-Schleifen erstellen

1.  Geben Sie die Zahlen von 1 bis 10 mit einer `for`-Schleife aus.

```{pyodide-python}

```


2.  Geben Sie "Python macht Spaß!" fünfmal mit einer `while`-Schleife aus.

```{pyodide-python}

```

3.  Erstellen Sie eine Schleife, die nur gerade Zahlen von 1 bis 20 ausgibt.


```{pyodide-python}

```

:::

<br>

## Flowcharts

*Beispiel Flowchart:*

``` python
i = 1
while i <= 100:
    print(i)
    if i == 39:
        i = 61
    else:
        i = i + 1
```
![<https://de.wikipedia.org/wiki/Programmablaufplan#/media/Datei:Flowchart_de.svg>](imgs/flowchart-1.png){fig-align="center" width="50%"}

```{pyodide-python}
i = 1
while i <= 100:
    print(i)
    if i == 39:
        i = 61
    else:
        i = i + 1
```

<br>

::: callout-caution
## Hands-on 4: Flowchart erstellen

Erstellen Sie eine Flowchart für die `for`-Schleife in *Aufgabe 3*.

Sie können diese auf <https://app.diagrams.net/> erstellen.

:::

::: callout-caution
## Hands-on 5: Fortgeschrittene Übung: Donuts-Essen

Erstellen Sie eine Flowchart für den folgenden Code:

``` python
donuts = 5
while donuts > 0:
    print("Ich esse einen Donut. Lecker!")
    donuts = donuts - 1
    if donuts == 1:
        print("Oh nein! Nur noch ein Donut übrig!")
    elif donuts == 0:
        print("Keine Donuts mehr... Zeit, neue zu kaufen!")
```

Hier können Sie ausprobieren, was der Code macht. 
Passt das zu Ihrer Flowchart?

```{pyodide-python}
donuts = 5
while donuts > 0:
    print("Ich esse einen Donut. Lecker!")
    donuts = donuts - 1
    if donuts == 1:
        print("Oh nein! Nur noch ein Donut übrig!")
    elif donuts == 0:
        print("Keine Donuts mehr... Zeit, neue zu kaufen!")
```
:::

## Wichtig: Endlosschleifen vermeiden

Schleifen müssen immer eine Bedingung haben, die sie beendet. Sonst könnte folgendes passieren:

``` python
i = 0
while i < 1:
    i = i - 1
    print(i)  # Diese Schleife läuft endlos!
```
Hier fehlt eine Bedingung, die `i` wieder größer macht, sodass die Schleife stoppt.

Probieren Sie es aus (wenn Sie einen Crash Ihres Browsertabs nicht scheuen...?). 

```{pyodide-python}
i = 0
while i < 1:
    i = i - 1
    print(i)  # Diese Schleife läuft endlos!
```

## Fazit

Schleifen sind ein mächtiges Werkzeug um wiederkehrende Aufgaben effizient zu lösen. **Schleifen werden fast überall benutzt**: Experimente programmieren, Daten einlesen, Daten bearbeiten, Grafiken erstellen, usw.

<br>

::: {.callout-tip collapse="true"}
## Hands-on Lösungen

### Hands-on 1

``` python
for i in range(10):
    print(i + 1)
```

Alternativ:

``` python
zahlen = [1,2,3,4,5,6,7,8,9,10]
for z in zahlen:
    print(z)
```

Oder:

``` python
zahlen = 1
while zahlen <= 10:
    print(zahlen)
    zahlen = zahlen + 1
```

### Hands-on 2

``` python
i = 0
while i < 5:
    print("Python macht Spaß!")
    i = i + 1
```

### Hands-on 3

``` python
n = 2
while n <= 20:
    print(n)
    n = n + 2
```

### Hands-on 4

![](imgs/flowchart-solution.png){fig-align="center"}

### Hands-on 5

![](imgs/donuts-solution.png){fig-align="center"}
:::
