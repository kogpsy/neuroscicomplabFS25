{
  "hash": "1223b1f92d14298f2d2cdc5dd7c02ef7",
  "result": {
    "engine": "knitr",
    "markdown": "# Daten importieren und vorverarbeiten\n\nIn R gibt es sehr viele hilfreiche _Funktionen_ und _Packages_, die für die Vorverarbeitung und Analyse neurowissenschaftlicher Verhaltensdaten (oder extrahierten Daten aus bildgebenden Verfahren) verwendet werden können. Beim Arbeiten in _R_ empfiehlt es sich durchgehend in einem _R-Markdown_ Dokument (`.Rmd`) innerhalb eines _RStudio-Projects_ zu arbeiten, da so ein reproduzierbarer Workflow erstellt werden kann. Ein weiterer Vorteil ist zudem, dass Rohdaten __nicht__ verändert werden müssen. \n\nIn diesem Kapitel finden Sie die wichtigesten data wrangling Funktionen des {tidyverse}-Packages:\n\n- die Pipe: `|>`\n- Daten einlesen: `read.csv()`\n- Daten filtern: `filter()`\n- Variablen auswählen: `select()`\n- Variablen generieren/verändern: `mutate()`\n- Variablentyp verändern: `as.factor()`, `as.numeric`\n- Gruppieren und zusammenfassen: `group_by()`\n- Datensätze speichern: `write.csv()`\n\n![](imgs/allison_horst_rasafriend.png)\n[Illustration by Allison Horst](https://allisonhorst.com/everything-else)\n\n<aside>Hilfreiche Datacamp Kurse:\n\n- [RStudio Tutorial](https://www.datacamp.com/tutorial/r-studio-tutorial).\n\n- [Introduction to the Tidyverse](https://app.datacamp.com/learn/courses/introduction-to-the-tidyverse).\n</aside>\n\n## Datenformate\n\nBevor mit einem Datensatz gearbeitet wird, empfiehlt es sich den Datensatz anzuschauen und Folgendes zu identifizieren:\n\n- In welchem Dateiformat ist der Datensatz gespeichert? (z.B. in `.csv`, `.xlsx` oder anderen?)\n\n- In welchem Datenformat ist der Datensatz geordnet? (`long` oder `wide` oder `mixed`?)\n\n- Gibt es ein `data dictionary` mit Erklärungen zu den Variablen?\n\n\n## Set up\n\n:::callout-caution\n## Hands-on: Vorbereitung\n\n1. Öffnen Sie RStudio.\n\n2. Erstellen Sie ein neues RStudio-Project \n\n    - Klicken Sie dafür auf `File` > `New Project` \n    \n    - Benennen Sie das Project `complab__fs25` und speichern Sie es an einem sinnvollen Ort auf Ihrem Computer. Wählen Sie, dass dafür ein neuer Ordner erstellt werden soll.\n    \n3. Erstellen Sie in diesem Projekt-Ordner einen Ordner namens `data`.\n\n4. Kopieren Sie in den `data`-Ordner Ihre erhobenen Daten des Stroop Experiments. Falls Sie noch keine Daten erhoben haben, dann laden Sie [hier](data/stroop_example.csv)  einen Beispiels-Datensatz herunter und speichern Sie ihn im `data`-Ordner.\n\n5. Erstellen Sie ein neues `.Rmd`-File (`File` > `New File` > `R Markdown`) und speichern Sie dieses unter `intro_datawrangling` im Projekt-Ordner.\n:::\n\n:::callout-tip\n## Tipp: Namensgebung für Files und Variablen\n\nWenn Sie Filenamen auswählen, achten Sie darauf dass diese [_machine-readable_](https://opendatahandbook.org/glossary/en/terms/machine-readable) sind:\n\n- keine Lücken (verwenden Sie stattdessen den `camelCase`, den `snake_case` oder `-`)\n\n- keine `ä`, `ö`, `ü` oder andere Sonderzeichen verwenden\n:::\n\n## Packages installieren und laden\n\nFür das Bearbeiten der Daten verwenden eignen sich Funktionen aus dem _Package_ {tidyverse}, eine Sammlung von verschiedenen, für _data science_ sehr geeigneten _R Packages_. Funktionen aus dem {tidyverse} ermöglichen und vereinfachen viele Schritte der Datenverarbeitung. Im Folgenden werden die wichtigsten und häufigst verwendeten Funktionen beschrieben. Das {tidyverse} können Sie direkt in _R_ herunterladen:\n\n<aside>Mehr Informationen zum {tidyverse} finden Sie [hier](https://r4ds.had.co.nz/).</aside>\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download und Installieren des Packages (nur einmal ausführen)\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\n\n\nEin _Package_ muss nur einmal heruntergeladen und __installiert__ werden, danach ist es lokal auf dem Computer gespeichert. Aber: Jedes Mal wenn _R_ geöffnet wird, müssen _Packages_ wieder neu __geladen__ werden.\n\n\n\n\n\n\n::: {.cell warnings='false' errors='false'}\n\n```{.r .cell-code}\n# Package laden (bei jedem Öffnen von R zu Beginn des Skripts ausführen)\nlibrary(\"tidyverse\") \n```\n:::\n\n\n\n\n\n\nSobald ein _Package_ installiert ist, können die Funktionen auch verwendet werden ohne, dass das ganze _Package_ mit `library()` geladen wird, indem die Funktion mit dem _Package_-Namen zusammen aufgerufen wird: `packagename::packagefunction()`. Dies macht Sinn, wenn verschiedene _Packages_ dieselben Namen für verschiedene Funktionen nutzen und es so zu Konflikten kommt oder wenn nur eine Funktion aus einem _Package_ verwendet werden soll und alle anderen sowieso nicht gebraucht werden.\n\n## Daten importieren in R: `read.csv()`\n\nEinen Datensatz in `.csv`-Format kann mit der Funktion `read.csv()` importiert werden. Teilweise muss innerhalb der Klammer zusätzlich der _Separator_ mit `sep = \",\"` angegeben werden, also mit welchem Zeichen die Spalten getrennt sind. Normalerweise ist dies `,` in `.csv` (_comma separated values_), es kann aber auch `;`, `.` oder eine Lücke ` ` sein. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten laden und anschauen\nd_stroop <- read.csv(\"data/stroop_example.csv\", sep = \",\")\nglimpse(d_stroop)\n```\n:::\n\n\n\n\n\n\n:::callout-caution\n## Hands-on: Daten einlesen\n\nLesen Sie den Stroop Datensatz in Ihrem `data`-Ordner ein und schauen Sie ihn dann mit den Funktionen `glimpse()` und `head()` an.\n\n- Welche Variablen sind wichtig für die weitere Auswertung?\n\n- Welche braucht es wahrscheinlich nicht mehr?\n\n- Finden Sie Versuchspersonenidentifikation? / Reaktionszeit? / Antwort der Versuchsperson?\n\n:::\n\n:::callout-tip\n## Tipp: Daten anderer Formate einlesen\n\nFalls Sie eine Excel-Datei einlesen möchten, können Sie dies mit der `read_excel()`-Funktion aus dem Package `readxl()` tun: `readxl::read_excel()`.\n\nFalls Sie nicht wissen, mit welcher Funktion Sie Ihre Daten einlesen können, können Sie dies in _RStudio_ ausprobieren indem Sie beim Reiter `Environment` auf `Import Dataset` klicken und dort Ihren Datensatz auswählen oder über `File` > `Import Dataset`. Sie können dort diverse Einstellungen tätigen. In der _R Console_ können Sie dann den Code sehen, der zum Einlesen verwendet wurde und die dortige Funktion in Ihren Code kopieren.\n:::\n\n## Verwenden der Pipe: `|>` oder `%>%`\n\nIn _R_ können Sie die _Pipe_ verwenden um mehrere Datenverarbeitungsschritte aneinander zu hängen. Damit sparen Sie sich aufwändige Zwischenschritte und vermeiden das Erstellen von immer neuen Datensätzen. Statt zwei einzelne Datenverarbeitungsschritte zu machen wie oben, können mehrere Schritte (hier Daten einlesen und anzeigen) zusammengefasst werden, in dem nach Zeilenende eine _Pipe_ eingefügt wird:\n\n<aside>Wann _Pipes_ ungeeignet sind wird [hier](https://r4ds.had.co.nz/pipes.html#when-not-to-use-the-pipe) beschrieben.</aside>\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_stroop <- read.csv(\"data/stroop_example.csv\", sep = \",\") |>\n    glimpse()\n```\n:::\n\n\n\n\n\n\nDie _Base R Pipe `|>` und die _`magritter` Pipe `%>%`_ unterscheiden sich in Details, in diesem Kapitel spielt es jedoch keine Rolle, welche Pipe Sie verwenden.\n\n:::callout-tip\n## Tipp\n\nAchtung: Wenn wir zu Beginn ein `<-` oder `=` verwenden, wird alles was nach der Pipe kommt wird ebenfalls im Datensatz verändert. Wird z.B. der Code ...\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_stroop <- read.csv(\"data/stroop_example.csv\", sep = \",\") |>\n    head()\n```\n:::\n\n\n\n\n\n\n...eingegeben, besteht der Datensatz `d_stroop` dann nur noch aus 6 Zeilen, weil die Funktion `head()` den Datensatz auf die ersten 6 Zeilen kürzt.\n\nWird die Pipe ohne `<-` oder `=` verwendet, bleibt der Datensatz unverändert:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_stroop |>\n    head()\n```\n:::\n\n\n\n\n\n::: \n\n## Daten filtern: `filter()`\n\nMit `filter()` können bestimmte Beobachtungen oder Untergruppen ausgewählt werden. Hierfür muss in der Funktion `filter(.data, filter, ...)` der Datensatz, die betreffende Variable, sowie eine Bedingung eingegeben werden. Es wird die ganze Zeile im Datensatz behalten in der die Variable der Bedingung entspricht.\n\n_Beispiele:_\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# nur die Trials mit den rot angezeigten Wörtern behalten\nd_stroop_filtered <- filter(d_stroop, color == \"red\")\n\n# dasselbe mit der Pipe\nd_filtered <- d_stroop |> filter(color == \"red\")\n\n# nur Trials die ohne blau angezeigten Wörter behalten\nd_filtered <- d_stroop |> filter(color != \"blue\")\n\n# nur Übungstrials mit einer Antwortszeit unter oder gleich gross wie 1 Sekunde behalten\nd_filtered <- d_stroop |> filter(respPractice.rt <= 1)\n\n# nur Übungstrials mit Antwortzeiten zwischen 1 und 2 Sekunden behalten\nd_filtered <- d_stroop |> filter(respPractice.rt > 1 & respPractice.rt < 2)\n\n# mehrere Filter verwenden\nd_filtered <- d_stroop |> \n    filter(color == \"red\") |>\n    filter(respPractice.rt <= 1)\n```\n:::\n\n\n\n\n\n\nIn unserem Datensatz möchten wir nur die gültigen Experimentdaten behalten, die _Color-To-Key_ (`ctk`) Bedingung sowie die _Practice Trials_ möchten wir ausschliessen. \n\nDie Variable `trials_test.thisN` enthält die Trialnummer, sie enthält nur Einträge, während der gültigen Trials. Wir können dies nutzen und alle Zeilen behalten in welchen die Zelle der Variable `trials_test.thisN` __nicht__ leer ist:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_stroop <- d_stroop |> \n    filter(!is.na(trials_test.thisN)) \n```\n:::\n\n\n\n\n\n\n\n::: callout-caution\n## Hands-on: Daten filtern\n\nErstellen Sie einen neuen Datensatz namens `d_stroop_correct` und filtern Sie diesen so dass er nur Trials mit __richtigen__ Antworten enthält. Schauen Sie in der Variable `keyResp_test_run.corr`, ob tatsächlich nur noch richtige Antworten übrig geblieben sind.\n\nAchtung: Arbeiten Sie in den weiteren Schritten __nicht__ mit diesem Datensatz weiter, da wir die falschen Antworten in einem nächsten Schritt noch im Datensatz brauchen.\n:::\n\n## Variablen auswählen: `select()`\n\nEin komplexer Datensatz mit sehr vielen Variablen wird oft für die Analyse aus Gründen der Einfachheit oder Anonymisierung reduziert. Das bedeutet, dass man sich die nötigen Variablen herausliest, und nur mit diesem reduzierten Datensatz weiterarbeitet. Hierzu eignet sich die Funktion `select()` sehr gut: Mit `select(.data, variablenname, ...)` können die zu behaltenden Variablen ausgewählt werden. Wird ein `!` vor einen Variablennamen gesetzt, wird die Variable __nicht__ behalten.\n\nMit `select()` können wir auch die Variablen sortieren und umbenennen, damit unser Datensatz so strukturiert ist, wie wir ihn gebrauchen können.\n\n_Beispiele:_\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Variable word und color behalten ohne Pipe\nd_simpler <- select(d_stroop, word, color)\n\n# Variable word und color behalten mit Pipe\nd_simpler <- d_stroop |> select(word, color)\n\n# alle Variablen ausser word behalten\nd_simpler <- d_stroop |> select(!word)\n\n# Variablennamen verändern\nd_simpler <- d_stroop |> select(newvariablename = word)\n```\n:::\n\n\n\n\n\n\nSollen mehrere Variablen am Stück ausgewählt werden, kann man die erste Variable in der Reihe (z.B. `word`) und die letzte in der Reihe (z.B. `congruent`) als `word:congruent` eingeben, dann werden auch alle dazwischen liegenden Variablen ausgewählt.\n\n::: callout-caution\n## Hands-on: Variablen auswählen\n\nSchauen Sie sich Ihren Datensatz an, welche Variablen benötigen Sie für die weitere Analysen?\n\nErstellen Sie einen neuen Datensatz `d_stroop_clean` in welchem Sie die entsprechenden Variablen auswählen und umbennen, wenn Sie Ihnen zu lange/kompliziert erscheinen.\n\nUntenstehend finden Sie ein Beispiel, wie der Datensatz danach aussehen könnte.\n:::\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 120\nColumns: 10\n$ id         <chr> \"sub-154989\", \"sub-154989\", \"sub-154989\", \"sub-154989\", \"su…\n$ experiment <chr> \"stroop_test\", \"stroop_test\", \"stroop_test\", \"stroop_test\",…\n$ trial      <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ word       <chr> \"rot\", \"rot\", \"blau\", \"gelb\", \"rot\", \"blau\", \"blau\", \"gelb\"…\n$ color      <chr> \"red\", \"red\", \"blue\", \"yellow\", \"yellow\", \"yellow\", \"red\", …\n$ corrAns    <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",…\n$ congruent  <int> 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0,…\n$ response   <chr> \"r\", \"r\", \"b\", \"g\", \"g\", \"g\", \"r\", \"r\", \"b\", \"g\", \"b\", \"b\",…\n$ rt         <dbl> 1.0639791, 0.7370255, 1.1883303, 1.2007897, 1.6688681, 1.58…\n$ accuracy   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Neue Variablen generieren und verändern: `mutate()` und `case_when()`\n\nMit der `mutate(.data, …)` Funktion können im Datensatz neue Variablen generiert oder bestehende verändert werden. \n\n_Beispiel:_\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Neue Variablen erstellen\nd_new <- d_stroop_clean |>\n    mutate(num_variable = 1.434,\n           chr_variable = \"1.434\",\n           sumofxy_variable = rt + 1,\n           copy_variable = word)\n\n# Bestehende Variablen verändern\nd_new <- d_new |>\n    mutate(num_variable = num_variable * 1000) # z.B. um Sekunden zu Millisekunden zu machen\n```\n:::\n\n\n\n\n\n\nMit `case_when()` kann eine neue Variable erstellt werden in Abhängigkeit von Werten anderer Variablen. Damit kann z.B. eine Variable `accuracy` erstellt werden, die den Wert `correct` hat, wenn die Aufgabe richtig gelöst wurde (z.B. Bedingung `rot` und Tastendruck `r`) und sonst den Wert `error` hat.\n\n_Beispiel:_\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_condvariable <- d_stroop_clean |>\n    mutate(cond_variable = case_when(rt > 0.8 ~ \"higher\",\n                                     rt <= 0.8 ~ \"lower\",\n                                     .default = NA))\n```\n:::\n\n\n\n\n\n\n::: callout-caution\n## Hands-on: Variablen generieren und verändern\n\n- Erstellen Sie im Datensatz `d_stroop_clean` eine neue Variable mit dem Namen `researcher`, den Ihren Namen enthält.\n\n- Erstellen Sie zudem eine Variable `accuracy_check`, mit `correct` für korrekte und `error` für inkorrekte Trials. Kontrollieren Sie mit der Variable `keyResp_test_run.corr` (oder Ihrem neuen Variablennamen, wenn Sie diese umbenannt haben) im Datensatz, ob Sie die Aufgabe richtig gelöst haben.\n\n- Ändern Sie die Trialnummer, so dass sie nicht mehr mit 0 beginnt, sondern mit 1.\n:::\n\n## Variablenklasse verändern: `as.factor()`, `as.numeric()`, ...\n\nVariablen können verschiedene Klassen haben, sie können z.B. kategoriale (`factor`, `character`) oder numerische (`integer`, `numeric`, `double`) Informationen enthalten. Beim Einlesen \"rät\" _R_, welche Klasse eine Variable hat. Teilweise möchten wir dies ändern. Wenn wir eine Variable zu einem Faktor machen möchten, verwenden wir `as.factor()`. Dies macht z.B. Sinn, wenn die Versuchspersonennummer als Zahl eingelesen wurde. Um von einem Faktor zu einer numerischen Variable zu kommen, verwenden wir `as.numeric()`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Die Variable \"congruent\" zu einem Faktor machen\nd_stroop_clean |> \n    mutate(congruent = as.factor(congruent))\n```\n:::\n\n\n\n\n\n\n:::callout-caution\n## Hands-on: Variablenklassen\n\nSchauen Sie sich den Datensatz mit `glimpse()` oder mit `View()` an. Welche Klassen enthält Ihr Datensatz und was bedeuten Sie?\n\n:::\n\n<!-- #### `relevel()` -->\n\n## Daten gruppieren und zusammenfassen: `group_by()` und `summarise()`\n\nMit diesen beiden Funktionen können wir mit wenig Code den Datensatz gruppieren und zusammenfassen.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Nach Wörter gruppieren\nd_stroop_clean |> group_by(word) |>\n    summarise(mean_rt = mean(rt),\n              sd_rt = sd(rt))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  word  mean_rt sd_rt\n  <chr>   <dbl> <dbl>\n1 blau     1.23 0.490\n2 gelb     1.26 0.447\n3 rot      1.16 0.552\n```\n\n\n:::\n:::\n\n\n\n\n\n\n:::callout-caution\n## Hands-on: Daten zusammenfassen\n\nErstellen Sie einen neuen Datensatz `d_stroop_summary`\n\n- Gruppieren Sie den Datensatz für Wortfarbe und Kongruenz.\n\n- Fassen Sie für diese Gruppen die durchschnittliche Antwortzeit und Accuracy sowie die Standardabweichungen zusammen.\n\n:::\n\n## Datensätze speichern: `write.csv()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(d_stroop_clean, file = \"data/dataset_stroop_clean.csv\", row.names = FALSE)\n```\n:::\n\n\n\n\n\n\n\n:::callout-caution\n## Hands-on: Datensätze speichern\n\nSpeichern Sie einen neuen Datensatz mit den vorverarbeiteten Daten.\n\n:::\n\n\n\n\n<!-- ## Change the data format from *long* to *wide* and vice versa -->\n\n<!-- Data can be formatted differently. It is always important to know: -->\n\n<!-- -   What data format does your data set have? -->\n\n<!-- -   What data format does your analysis pipeline require? -->\n\n<!-- ***Long format*** -->\n\n<!-- -   every assessed/measured variable has one column (e.g. subject id, age, IQ score, response time, response button, ...) -->\n\n<!-- -   each measure has one row -->\n\n<!-- -   if one variable has several measures (e.g. `rt` or `accuracy`) but the other variable has only few/one (e.g. the `sub-id`), the values of the second are repeated -->\n\n<!-- Data visualization and analysis is often easier in this format. If your data is in *wide* format it is necessary to create a new data frame in *long* format for the further data wrangling in this course. -->\n\n<!-- ***Wide format*** -->\n\n<!-- -   each measurement has one column -->\n\n<!-- -   each entity (e.g. person) has one row -->\n\n<!-- This data format makes it easy to spot missing values or outliers and count how many observations you have. -->\n\n<!-- ------------------------------------------------------------------------ -->\n\n<!-- ![](imgs/widelongformat.JPG){fig-align=\"center\"} -->\n\n<!-- ------------------------------------------------------------------------ -->\n\n<!-- ::: {.callout-tip appearance=\"simple\"} -->\n<!-- ## Questions -->\n\n<!-- In our example data set we have 4 columns (`id`, `condition`, `x`, `y`) and 1846 rows. What format is this? -->\n\n<!-- What data format does your own data set have? -->\n<!-- ::: -->\n\n<!-- ```{r} -->\n<!-- #| eval: FALSE -->\n<!-- glimpse(d) -->\n<!-- ``` -->\n\n<!-- ### `pivot_wider()` -->\n\n<!-- With `pivot_wider(data, id_cols = , names_from = , values_from = , ...)` you can transform your data from *long* to *wide* format. -->\n\n<!-- ***Example*** -->\n\n<!-- ```{r} -->\n<!-- #| eval: FALSE -->\n<!-- d_wide <- d |> pivot_wider(id_cols = id, names_from = condition, names_glue = \"{condition}_{.value}\", values_from = c(x, y)) -->\n<!-- glimpse(d_wide) -->\n<!-- ``` -->\n\n<!-- ### `pivot_longer()` -->\n\n<!-- With `pivot_longer(data, cols = , names_to = , ...)` you can transform your data from *wide* to *long* format. -->\n\n<!-- With `cols` you specify the columns of the wide dataframe you want to bring into long format. With `names_to` you specify how the new variables (colums) are named (enter them with `\"`). With `names_sep`you can specify, if two variables should be extracted from the existing column. -->\n\n<!-- ***Example*** -->\n\n<!-- ```{r} -->\n<!-- #| eval: FALSE -->\n<!-- d_long <- d_wide |> pivot_longer(cols = away_x:dino_y, names_to = c(\"condition\", \"measure\"), names_sep = \"_\") -->\n<!-- glimpse(d_long) -->\n<!-- ``` -->\n\n<!-- ::: {.callout-tip appearance=\"simple\"} -->\n<!-- ## Rule of thumb -->\n\n<!-- -   Variables/factors should have a column (e.g. the variables you want to enter in your model formula). -->\n\n<!-- -   Factor levels (e.g. condition levels such as `away`) should be coded within rows. -->\n<!-- ::: -->\n\n\n## Data wrangling workflow implementieren\n\n:::callout-caution\n## Hands-on: Data wrangling workflow\n\nErstellen Sie nun ein Projekt für das Random-Dot Experiment und führen Sie die gelernten _data wrangling_ Schritte selbstständig durch.\n\n:::\n\n\n<aside>Zu den gelernten Funktionen finden Sie hier [Grafiken](https://allisonhorst.com/r-packages-functions) die evtl. helfen, sich die Funktions-Namen zu merken.</aside>\n",
    "supporting": [
      "datawrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}